"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var THREE = require("../../utils/three.min.js");
var cameraConfig = {
    flag: true,
    frame: {
        data: new Uint8Array(288 * 352),
        width: 0,
        height: 0
    },
};
var camera, renderer, scene;
Page({
    data: {
        frameSize: "small"
    },
    onLoad: function () {
        this.frameSizeInit();
    },
    onReady: function () {
        var that = this;
        var frameCount = 0;
        this.webglInit();
        var listener = wx.createCameraContext().onCameraFrame(function (res) {
            var timeStart = Date.now();
            if (cameraConfig.flag === false)
                return;
            cameraConfig.flag = false;
            cameraConfig.frame.data = new Uint8Array(res.data);
            that.handleFrame();
            console.log(frameCount++);
            console.log("FPS:", 60 * 1000 / (Date.now() - timeStart));
        });
    },
    handleFrame: function () {
        var geometry = new THREE.PlaneGeometry(cameraConfig.frame.width, cameraConfig.frame.height);
        var texture = new THREE.DataTexture(cameraConfig.frame.data, cameraConfig.frame.width, cameraConfig.frame.height, THREE.RGBAFormat);
        var tex_material = new THREE.MeshPhongMaterial({
            map: texture,
            side: THREE.DoubleSide
        });
        geometry.translate(cameraConfig.frame.width / 2, cameraConfig.frame.height / 2, 0);
        geometry.rotateX(Math.PI);
        var mesh = new THREE.Mesh(geometry, tex_material);
        scene.add(mesh);
        renderer.render(scene, camera);
        cameraConfig.flag = true;
    },
    webglInit: function () {
        wx.createSelectorQuery().select('#canvasId')
            .node()
            .exec(function (res) {
            var webcanvas = res[0].node;
            var k = cameraConfig.frame.width / cameraConfig.frame.height;
            var s = cameraConfig.frame.height / 2;
            camera = new THREE.OrthographicCamera(-s * k, s * k, s, -s, 1, 155);
            var x = cameraConfig.frame.width / 2;
            var y = -1 * cameraConfig.frame.height / 2;
            camera.position.set(x, y, 150);
            camera.lookAt(x, y, 0);
            renderer = new THREE.WebGLRenderer({
                canvas: webcanvas,
            });
            var ambient = new THREE.AmbientLight(0xF5F5F5);
            scene = new THREE.Scene();
            scene.add(ambient);
        });
    },
    frameSizeInit: function () {
        if (this.data.frameSize === "small") {
            cameraConfig.frame.width = 288;
            cameraConfig.frame.height = 352;
        }
        else if (this.data.frameSize === "medium") {
            cameraConfig.frame.width = 480;
            cameraConfig.frame.height = 640;
        }
        else if (this.data.frameSize === "large") {
            cameraConfig.frame.width = 720;
            cameraConfig.frame.height = 1280;
        }
    }
});
//# sourceMappingURL=data:application/json;base64,